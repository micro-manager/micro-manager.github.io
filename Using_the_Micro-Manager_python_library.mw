'''MMCorePy''' is a wrapper that allows you to control microscope hardware from python interactive session or scripts. It's support  Windows, Mac and Linux.

Micromanager's main parts:
* CMMCore - basic module, written in C++. Script languages like python just wrap it by [http://www.swig.org swig].
* Device adapters - various libraries that allow support for various hardware. If you want to built one and extend MM devise support, feel free to use [[Micro-Manager Device Developer's Kit for Windows|SDK]].
* MMCorePy - python wrapper. MM build scripts are support both python 2 and 3, but windows version ships with python 2 bindings only.
* MMCoreJ - java wrapper
* MMStudio - Micromanager GUI (technically it is ImageJ plugin).

== Environment setup ==
You must install python2 and numpy. Windows users may prefer using an python distribution instead manual separate installation.

=== Manual ===
* [http://python.org/ python 2.7.x] (python2 is default for windows now)
* [http://scipy.org/ numpy 1.7.x] Micormanager represent imaging data as multidimensional numpy arrays.

=== Using python distributions ===
It's convenient to install a distribution which includes Python, numpy, scientific libraries, GUI frameworks and IDEs. All distributions have a free version, some of them have extended paid version, but you can request free academic license.
* [https://www.enthought.com/products/epd/free/ Enthought's python distribution (EPD)]
* [http://continuum.io/downloads Anaconda], has package manager.
* [https://code.google.com/p/pythonxy PythonXY] totally free.

=== Useful libraries ===
* Scipy - scientific algorithms, multidimensional image processing toolbox.
* Matplotlib - fastest way to show your image data.
* Opencv - computer vision and image processing library. Sometimes faster than scipy.
* Pillow - very basic image processing. Scipy uses it for image loading and writing.
* Scikit-image - "pythonic" scientific-oriented image processing algorithms collection.
* [http://ipython.org/ IPython] - improved interactive python environment

== Micromanager installation ==

=== Windows & Mac ===
[[Download_Micro-Manager_Latest_Release|Download]] and install Micro-Manager on your computer. Add Micromanager installation folder to [https://docs.python.org/2/using/cmdline.html#envvar-PYTHONPATH PYTHONPATH] (i.e. "''C:\Program Files\Micro-Manager-1.4''", it should contain <small>''MMCorePy.py''</small> and <small>''_MMCorePy.pyd''</small> files). Create variable if it not exist. At now you can import MMCorePy without an error.

=== Linux ===
MM package from your distribution repository, in most cases, ships with CMMCore, MMCorePy (python 2 or 3 wrapper) and MMCoreJ, but without GUI. At least your system variables should be already configured properly. Python and Numpy would be installed by your package manager as dependency.

== First steps ==
Familiarize yourself with Micro-Manager and learn how to connect it to your hardware by MMStudio GUI.
* Find your device on [[Device Support|this page]] and figure out what adapter you need.
* [[Micro-Manager Configuration Guide|Micro-Manager Configuration Guide]] help you to understand how properties work.
* Read the general [[Micro-Manager Programming Guide|Micro-Manager Programming Guide]]

Images returned by calls to an instance of the pythonized Micro-Manager core class ([http://www.micro-manager.org/content/doc/mmcore_api/html/class_c_m_m_core.html CMMCore]) are stored in numpy arrays for convenience, and can be easily displayed by pylab (matplotlib) commands. Here is a short example (using matplotlib) that demonstrates use of the python wrapper to acquire and display an image.

<code><pre>
# Create a Micro-Manager core object:
import MMCorePy
mmc = MMCorePy.CMMCore()

#  Load and initialize the demo camera device:
mmc.loadDevice("cam","DemoCamera","DCam")
mmc.initializeDevice("cam")

# Snap and retrieve an image:
mmc.snapImage()
im1 = mmc.getImage()

# Display the image:
from pylab import *
ion() # Activate interactive mode
figure()
imshow(im1,cmap = cm.gray)
</pre>
</code>

A longer example script, [https://github.com/mdcurtis/micromanager-upstream/blob/master/bindist/any-platform/MMCoreWrapDemo.py MMCoreWrapDemo.py], is available in the Micro-Manager root directory.

Also check out [https://github.com/radioxoma/micromanager-samples micromanager-samples repo] for python code samples (live video acquisition, property discovery etc).

== Further reading ==
* [http://scipy-lectures.github.io/advanced/image_processing/index.html Image manipulation and processing using Numpy and Scipy] by Python Scientific Lecture Notes.
* [http://scikit-image.org/docs/dev/auto_examples Scikits-image gallery]
* [https://github.com/jrjohansson/scientific-python-lectures Lectures on scientific computing with Python]
* [http://docs.opencv.org/trunk/doc/py_tutorials/py_tutorials.html OpenCV-Python Tutorials]

== Micromanager code ==

* [https://github.com/mdcurtis/micromanager-upstream Micromaanger SVN-tracking repository on Github]

Written by Eugene Dvoretsky -- [[User:Radioxoma|Radioxoma]] ([[User talk:Radioxoma|talk]]) 10:00, 8 June 2014 (PDT)

{{Programming_Sidebar}}
