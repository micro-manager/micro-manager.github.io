Micro-Manager has a plugin system similar to ImageJ's. To write a Micro-Manager plugin, simply implement the [https://valelab.ucsf.edu/svn/micromanager2/branches/micromanager1.3/mmstudio/src/org/micromanager/api/MMPlugin.java <code>MMPlugin</code> interface]. Note the static String <code>menuName</code> lets you control the name of the plugin that appears in the Micro-Manager Plugins menu.

Micro-Manager's classpath is set up so that Micro-Manager plugins can import classes from:
<ol>
<li>the [http://java.sun.com/j2se/1.5.0/docs/api/ Java 2 SE 5.0 Libraries]</li>
<li>[https://valelab.ucsf.edu/~arthur/mm_doc/html/namespaces.html Micro-Manager]</li>
<li>[http://rsbweb.nih.gov/ij/developer/api/ ImageJ]</li>
<li>[http://commons.apache.org/math/userguide/overview.html Apache Commons Math]</li>
</ol>

Once you have compiled your code into a .class file or a .jar file, drop that file into Micro-Manager's mmplugins directory, and it will be loaded at startup. You can also dynamically load your plugin by including a line in the MMStartup.bsh file (in the root directory of your Micro-Manager installation). For example:

<pre>
gui.installPlugin("org.micromanager.surveyor.SurveyorPlugin");
</pre>

'''Using Eclipse or Netbeans'''

The dynamic loading feature (described above) is useful if you are developing your plugin using an IDE such as Eclipse or Netbeans. Here are the steps:
<ol>
<li>Set up your project so that Micro-Manager's jars are on the classpath.</li>
<li>Create a MMStartup.bsh file as described above.</li>
<li>Set your IDE's run command to start up ImageJ, by calling the <code>main</code> function in <code>ij.ImageJ</code> in your Micro-Manager root directory.</li>
<li>Build and run</li>
</ol>
As long as your plugin is placed on the classpath by the IDE (as is done by both Eclipse and Netbeans), the MMStartup.bsh script will properly load your nascent plugin in the plugins menu.

In addition, you have access to the GUI and core instances (objects) already created by Micro-Manager startup. Micro-Manager will call
<code>public void setApp(ScriptInterface app);</code>
you can get the GUI object and core objects thus:
<pre>
MMStudioMainFrame gui_ = (MMStudioMainFrame) app;
CMMCore core_ = gui_.getMMCore();
</pre>
Micro-Manager distribution includes swing-layout-*.*.jar so that you can use the free Netbeans GUI Builder for your plugin. Make sure you set the "Layout Generation Style" property as explained on the [http://wiki.netbeans.org/FaqFormLayoutGenerationStyle Netbeans website].
