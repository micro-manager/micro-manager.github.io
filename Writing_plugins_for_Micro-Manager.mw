Micro-Manager has a Java-based plugin system similar to ImageJ's. To write a Micro-Manager plugin, simply implement the [https://valelab.ucsf.edu/svn/micromanager2/branches/micromanager1.3/mmstudio/src/org/micromanager/api/MMPlugin.java <code>MMPlugin</code> interface]. Note the static String <code>menuName</code> lets you control the name of the plugin that appears in the Micro-Manager Plugins menu.

Micro-Manager's classpath is set up so that Micro-Manager plugins can import classes from:
<ol>
<li>the [http://java.sun.com/j2se/1.5.0/docs/api/ Java 2 SE 5.0 Libraries]</li>
<li>[https://valelab.ucsf.edu/~arthur/mm_doc/html/namespaces.html Micro-Manager]</li>
<li>[http://rsbweb.nih.gov/ij/developer/api/ ImageJ]</li>
<li>[http://commons.apache.org/math/userguide/overview.html Apache Commons Math]</li>
</ol>

Once you have compiled your code into a .class file or a .jar file, drop that file into Micro-Manager's mmplugins directory, and it will be loaded at startup. You can also dynamically load your plugin by including a line in the MMStartup.bsh file (in the root directory of your Micro-Manager installation). For example:

<pre>
gui.installPlugin("org.micromanager.surveyor.SurveyorPlugin");
</pre>

The source code for a number of Micro-Manager plugins is publicly available [https://valelab.ucsf.edu/svn/micromanager2/branches/micromanager1.3/plugins/ here].

'''Using Eclipse or Netbeans'''

The dynamic loading feature (described above) is useful if you are developing your plugin using an IDE such as Eclipse or Netbeans. Here are the steps:
<ol>
<li>Install [http://netbeans.org Netbeans].</li>
<li>Select New > New Project... > Java > Java Class Library</li>
<li>Name your plugin and press Finish.</li>
<li>Under the Projects tab, right-click your plugin and choose Properties. Then choose Compile > Libraries > Add JAR/Folder.
<li>Browse to C:\Program Files\Micro-Manager-1.3\plugins\Micro-Manager and choose "bsh-2.0b4.jar" "commons-math-2.0.jar" "MMCoreJ.jar" "MMJ_.jar" "swing-layout-1.0.4.jar" "swingx-0.9.5.jar".</li>
<li>Click Add JAR/Folder again and add C:\Program Files\Micro-Manager-1.3\ij.jar</li>
<li>Click Categories > Run and set Main Class to ij.ImageJ, working directory to C:\Program Files\Micro-Manager-1.3\ . Click OK.</li>
<li>Now choose Debug > Debug Project from the Menu and ImageJ should launch</li>
<li>Right-click your Source Packages in your project, under the Projects tab. Select New > Java Class... and give it a name and package.</li>
<li>Edit the class so that it implements org.micromanager.api.MMPlugin. </li>
<li>Create a MMStartup.bsh file as described above.</li>
<li>Now choose Debug > Debug Project and your plugin should appear in the Micro-Manager Plugins menu.</li>
</ol>
As long as your plugin is placed on the classpath by the IDE (as is done by both Eclipse and Netbeans), the MMStartup.bsh script will properly load your nascent plugin in the plugins menu.

In addition, you have access to the GUI and core instances (objects) already created by Micro-Manager startup. Micro-Manager will call
<code>public void setApp(ScriptInterface app);</code>
you can get the GUI object and core objects thus:
<pre>
MMStudioMainFrame gui_ = (MMStudioMainFrame) app;
CMMCore core_ = gui_.getMMCore();
</pre>
Micro-Manager distribution includes swing-layout-*.*.jar so that you can use the free Netbeans GUI Builder for your plugin. Make sure you set the "Layout Generation Style" property as explained on the [http://wiki.netbeans.org/FaqFormLayoutGenerationStyle Netbeans website].
