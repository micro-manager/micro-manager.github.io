==Preparation==

First make sure you have enough hard disk space. 5 GB is probably enough.

====Directory structure for the source code====
Create a directory named <code>projects</code>. The <code>projects</code> directory may reside anywhere you like and will contain the subdirectories <code>micro-manager1.4</code>, <code>3rdpartypublic</code>, and <code>3rdparty</code>.

====Downloading the source code====
To check out the [[Micro-Manager Source Code]], first obtain a [http://subversion.apache.org/packages.html#windows Subversion client]. From <code>projects/</code>, run:

<code><pre>svn co https://valelab.ucsf.edu/svn/micromanager2/trunk/ micro-manager1.4
svn co https://valelab.ucsf.edu/svn/3rdpartypublic/</pre></code>

====Required tools and applications====

To build the entire application from the source code, you will need to install the following tools:

To build device adapters:
# Microsoft Visual Studio 2008 (Express is fine, and doesn't cost anything.)

(Work is underway to migrate Micro-Manager to Visual Studio 2010.)

Additionally, to build the entire Micro-Manager package:
# [http://java.sun.com/javase/downloads/index.jsp JDK Standard Edition] 6 or later
# [http://ant.apache.org/ Apache Ant] 1.8.1 or later (tested with 1.9.2)

Tell the build tools where to find Java and Ant by opening the System control panel / Advanced system settings / Environment Variables / System variables and addding the following new entries:

<code><pre>
ANT_HOME=C:\apache-ant-1.9.2 (or path to Ant)
JAVA_HOME=C:\Program Files\Java\jdk1.6.0_20 (or path to Java)
PATH=%PATH%;%ANT_HOME%\bin
</pre></code>

====Device libraries and SDKs====

Some device adapter require the installation of manufacturer's SDKs in order to build. All SDKs should be installed in the <root>/projects/3rdparty directory. The actual names of SDK directories should match the paths in the corresponding header files in the Micro-manager source code for device adapters.

If you don't want to build one or more device adapters (because you don't have the SDK), you should remove corresponding projects from the master solution: MMCoreJ_wrap.sln.

To add a device adapter to the automated build, use Visual Studio 2008 to add the device adapter project (a .vcproj file) to the MMCoreJ_wrap.sln or MMCoreJ_wrap_x64.sln. Under the device adapter's project properties, make sure the device adapter has this command under Build Events > Post-build Event:
 copy "$(TargetPath)" ..\..\bin_$(PlatformName)
and a Linker > General > Output File of
 $(OutDir)/mmgr_dal_YourDeviceName.dll

==Setting up library paths==

The project files in the repository should have the correct path settings.

To deal with the flood of text in the Output window, in the Solution Explorer right-click and build one project at a time.

If in Visual Studio you get an error:

        Target(FOO) does not match the Linker's OutputFile property value (BAR) ...

You could right-click on the project > properties > Configuration Properties > General > Target Name and add the leading "mmgr_dal_" to the beginning of $(ProjectName) to satisfy it.

=====Setting up 64-bit support on Visual C++ Express=====
Visual Studio Express does not include 64-bit compiler support out of the box.  To compile x64 libraries in addition to Win32, you need to install the Windows SDK:
http://msdn.microsoft.com/en-us/windows/bb980924

After installation you should find the x64 specific libraries at a path similar to:

        C:\Program Files\Microsoft SDKs\Windows\v7.1\Lib\x64

To build your x64 project you would need to make sure this is in the 'Additional Library Directories' setting in your project, specifically in Project > Properties > Configuration Properties > Linker > Additional Library Directories.  If you do not do this you will get linker errors similar to:

        LINK: fatal error LNK1181: cannot open input file FOO.lib

==Building the C++ layer: MMCore and device adapters==

You can build C++ part of the project by opening MMCoreJ_wrap.sln in Visual Studio 2008 and running the full build. This will build the MMCore, Java wrappers and all device adapters. You can remove any device adapter project from the solution if you don't have the corresponding SDK or if you don't need to build it.

The C++ components can also be built using the batch file buildscripts/buildCpp.bat.

==Building the Java layer: Micro-Manager Studio==

The Java layer of the Micro-Manager can be build using the Apache Ant utility with the build.xml project file, located in the directories for each Java component (mmstudio, acqEngine, plugins, autofocus).

Building these components currently requires that MMCoreJ.jar be manually placed in <root>/projects/micro-manager-1.4/build/Java.

In the mmstudio directory from the command line, run:

  ant jar

Which should produce MMJ_.jar in <root>/projects/micro-manager-1.4/build/Java.

The same command should work in acqEngine, plugins, the individual plugin subdirectories, and autofocus (acqEngine depends on mmstudio, and plugins depend on mmstudio and acqEngine, so they must be built in that order).

==Building the full source in one step==

You can build the C++, Java, and Clojure components in one step by typing, in <root>/projects/micro-manager-1.4, the following command:

  ant stage -Dmm.architecture=Win32 -Dmm.configuration=Release -Dmm.build.failonerror=false

The value for mm.architecture can also be x64. The mm.build.failonerror=false setting causes device adapters and plugins to be skipped if they do not compile. Built files are placed in the stage/Release/Win32 directory.

Following the above command, 

  ant package -Dmm.architecture=Win32 -Dmm.configuration=Release

will produce an installer in the dist/ directory.

== Using Visual Studio 2010 (or 2012) ==

Work is underway (by Mark) to migrate Micro-Manager to Visual Studio 2010 (in which the project file format has changed significantly from VS2008).

To setup a 32/64-bit build environment with VS2010, 

* Install Visual C++ 2010 Express from http://www.microsoft.com/visualstudio/eng/downloads#d-2010-express.
* Install Microsoft Windows SDK 7.1 (http://www.microsoft.com/en-us/download/details.aspx?id=8279).

Note that if you install the Windows SDK before VS2010, you may need to install this, too: http://www.microsoft.com/en-us/download/details.aspx?id=4422

Until the whole project migrates to VS2010, building individual device adapters using VS2010 is (usually) relatively easy. Open the .vcproj file for a device adapter in VS2010, and follow the instructions to auto-convert (a .vcxproj file is generated). Then, in Project Properties,

* Reset Linker Output File to "inherit from parent or project defaults", which gives you $(OutDir)$(TargetName)$(TargetExt), and set Target Name to mmgr_dal_$(ProjectName)
* Set Platform Toolset to WindowsSDK7.1

Make sure to do both after selecting All Platforms and All Configurations.

I have not tried VS2012 yet, but the necessary steps are likely to be similar to VS2010.

{{Programming_Sidebar}}
