==Preparation==

First make sure you have enough hard disk space. I don't know how much you will need but I would think if you have about 5GB you should be fine.

====Directory structure for the source code====
When you unzip the source code or download from the repository, the default directory for the entire source code should be "projects/micromanager1.3". This directory should reside in the parent directory root of your choice. The root directory will be referred to as <root>. In the root directory you need to create a 3rdparty directory where you need to place needed software packages, and all SDKs needed for your hardware. You can download the development  microManager source code via subversion at  https://valelab.ucsf.edu/svn/micromanager2/branches/micromanager1.3/

====Required tools and applications====

To build the entire application from the source code, you will need to install the following tools:

# Microsoft Developer Studio 2008 or 2010 Visual C++.
# JDK (Java developer's kit) standard edition, version 6.0 or later (Download from http://java.sun.com/javase/downloads/index.jsp.)
# ImageJ 1.43j or later (Download from http://rsb.info.nih.gov/ij/download.html and install with the setup executable. Easiest is to install in “c:/Program Files/ImageJ” to avoid changing paths later.)
# Beanshell 2.0.4 or later  (Download bsh-2.0b4.jar from http://www.beanshell.org/download.html and place in <root>/3rdparty/Beanshell and copy to the plugins folder of the ImageJ folder installed in step 3.)
# Apache ANT (Download from http://ant.apache.org/. For installation this should work, if the directory is c:\ant
# A subversion client, for example: http://www.open.collab.net/downloads/subversion

Assuming you've installed Java JDK 6.0 update 17, set the following "environment variables" goto My Computer / Properties / Advanced / Environment Variables / System variables and ad the following new entries  :

<code><pre>
ANT_HOME=c:\ant
JAVA_HOME=c:\jdk1.6.0.17
PATH=%PATH%;%ANT_HOME%\bin
</pre></code>

====Required open source libraries====

In addition to software tools you will need to install the following software packages in the <root>/3rdparty directory:

SWIG version 1.3.24 and place it in "<root>/3rdparty/SWIG-1.3.24" subdirectory (Download from http://www.swig.org/download.html -> all releases, extract to <root>/3rdparty and install with swig.exe.)

As of this writing, MM is using the Boost 1.40 release. Download Boost and place it in the "<root>3rdparty/boost" subdirectory. The easy way to do this is as follows:

1. In a command prompt, cd to <root>3rdparty, if this directory is not already a subversion working copy, issue the following command (assuming you've got subversion in your command path):

        svn co -N http://svn.boost.org/svn/boost/tags/release .

2. Create a text file called externals_value.definition

3. In that text file put exactly this key + URL: 

         boost http://svn.boost.org/svn/boost/tags/release/Boost_1_40_0/

4. In order to create an uncomitted 'externals' definition in your 3rdparty directory, type exactly the following command (again assuming you've got subversion in your command path):

         svn propset svn:externals . -F externals_value.definition
 
5. Still in the 3rdparty directory issue:
         svn up
6. After boost has been downloaded, to build the bjam tool, in the <root>/3rdparty/boost directory issue:
         bootstrap
7. After the bjam.exe tool is built, assuming you've got VS 2008 issue:
         .\bjam toolset=msvc-9.0 --build-type=complete 

8. The result will be a set of libraries with the library type and threading model encoded in the library name, all headers will be in <root>\3rdparty\boost\boost and the libraries will be  in <root>\3rdparty\boost\stage\lib





INPOUT32 library and place it in "<root>/3rdparty/inpout32" subdirectory. (Download from http://www.logix4u.net/, extract, and build the library files. After building the inpout32 project you need to copy the inpout32.dll to <root>/micromanager1.3/bin, because this dll is required at run-time.)

====Device libraries and SDK's====

Some device adapter require the installation of manufacturer's SDKs in order to build. All SDKs should be installed in the <root>/3rdparty directory. The actual names of SDK directories should match the paths in the corresponding header files in the Micro-manager source code for device adapters.

If you don't want to build one or more device adapters (because you don't have the SDK), you should remove corresponding projects from the master solution: MMCoreJ_wrap.sln.

==Setting up library paths==

The project files in the repository should have the correct path settings.

==Building the C++ layer: MMCore and device adapters==

You can build C++ part of the project by opening MMCoreJ_wrap.sln in MSDEV and running the full build. This will build the MMCore, Java wrappers and all device adapters. You can remove any device adapter project from the solution if you don't have the corresponding SDK or if you don't need to build it.

==Building the Java layer: Micro-Manager Studio==

Java layer of the Micro-Manager can be build using the standard ANT utility with build.xml project file, located in the <root>/micro-manager-1.0/mmStudio directory. Before running the build the project file build.xml must be modified to specify paths for external libraries: ImageJ and BeanShell.

<code><pre>
<!-- EDIT PATHS BELOW TO MATCH YOUR SYSTEM -->

<!-- Specify the system path to the ImageJ root directory -->
<property name="ImageJPath" value="C:/Program Files/ImageJ"/>

<!-- Specify the system path to the beanshell jar -->
<property name="beanshell" value="C:/projects/3rdparty/BeanShell/bsh-2.0b4.jar"/>

<!-- DO NOT MODIFY FROM THIS POINT ON -->
</pre></code>

==Building the full source in one step==

To build the entire Micro-Manager source code with a single command, you can use mmbuild.bat. You can modify this file to switch between Debug and Release builds, specify different paths for ANT and MSDEV tools, etc. Required MSDEV paths for command-line compilation are located in vsvars32.bat file in the MSDEV installation package.
