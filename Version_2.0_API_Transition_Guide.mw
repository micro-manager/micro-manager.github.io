One of the major changes in 2.0 is a restructuring of the API. In 1.4, most of the functionality of the API was in a single module, [https://valelab.ucsf.edu/~MM/doc/mmstudio/org/micromanager/api/ScriptInterface.html ScriptInterface]. In 2.0, the API has been subdivided, and some methods have been replaced by new techniques for accomplishing similar tasks. This page runs down the list of methods in 1.4's ScriptInterface and tells you how to perform the equivalent task in 2.0.

=== CompatibilityInterface ===

First, note that the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/CompatibilityInterface.html CompatibilityInterface] module contains many old methods from ScriptInterface, unmodified. These methods work as they did in 1.4, and include the following:

* addMMListener
* attachRunnable
* autostretchCurrentWindow
* clearRunnables
* enableRoiButtons
* getAcquisitionEngine2010
* getAutofocus
* getAutofocusManager
* getBackgroundStyle
* getChannelExposureTime
* getHideMDADisplayOption
* getPositionList
* getROI
* getVersion
* installAutofocusPlugin
* isAcquisitionRunning
* isPaused
* loadAcquisition
* logStartupProperties
* makeActive
* markCurrentPosition
* refreshGUI
* refreshGUIFromCache
* removeMMListener
* runAcquisition
* saveConfigPresets
* setAcquisitionSettings
* setBackgroundStyle
* setChannelExposureTime
* setConfigChanged
* setPause
* setPositionList
* setROI
* showAutofocusDialog
* showXYPositionList
* versionLessThan

You can access the CompatibilityInterface by calling the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html Studio's] [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html#compat() compat] method. The Studio in turn is available in the BeanShell window as "mm", and is provided to plugins when they are initialized.

=== acquisitionExists ===

In 1.4, Micro-Manager maintained a registry of all "open" datasets (a.k.a. acquisitions), using a unique string key for each one. In 2.0, such a registry no longer exists. Any code that creates a new [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastore] (the 2.0 equivalent to a 1.4 acquisition) is responsible for holding onto references to it, destroying it, recreating it, etc.

It is theoretically possible to find Datastores by way of their [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayWindow.html DisplayWindows], the windows that show images from the Datastore. You can ask the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayManager.html DisplayManager] for a list of all DisplayWindows, and ask each DisplayWindow for its Datastore using the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayWindow.html#getDatastore() getDatastore] method. However, remember that Datastores are not required to have any DisplayWindows (and also that it is possible to have multiple DisplayWindows for a single Datastore). If you really need for your code to find a Datastore created by someone else's code, then you should find a better way for the two components to talk to each other.

=== addImageToAcquisition ===

In 2.0, third-party code is responsible for maintaining its own [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastores] (the rough equivalent of 1.4 acquisitions), and can freely add images to Datastores themselves using the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html#putImage(org.micromanager.data.Image) putImage] method.

=== addMMBackgroundListener ===

This method was used as part of 1.4's day/night system for enabling low-contrast displays for use in darkrooms. 2.0 uses a different system that works automatically across the entire program; there is no need for individual components to register themselves. Thus this method is obsolete.

=== addToAlbum ===

The "album" [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastore] is now available via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html Studio's] [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html#album() album] method, and you can freely add images to it yourself (see the <code>addImageToAcquisition</code> notes above)

=== clearMessageWindow ===

This method was moved to the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/ScriptController.html ScriptController] object accessible via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html Studio's] [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html#scripter() scripter] method.

=== closeAcquisition ===

As discussed in the notes on <code>acquisitionExists</code>, above, Micro-Manager no longer maintains responsibility for all open datasets. If you want to clean up a [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastore], you must remove all references to that Datastore from memory. Micro-Manager will not maintain open references itself except via any [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayWindow.html DisplayWindows] you may have requested be created. You can close all open DisplayWindows for a given Datastore via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayManager.html DisplayManager's] [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayManager.html#closeDisplaysFor(org.micromanager.data.Datastore) closeDisplaysFor] method.

=== closeAcquisitionWindow ===

See the notes on <code>closeAcquisition</code>, above.

=== closeAllAcquisitions ===

As discussed in the notes on <code>acquisitionExists</code>, above, Micro-Manager no longer maintains a listing of all "acquisitions". Third-party code can freely create new [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastores] and Micro-Manager will not be able to "see" them. Thus this method is impossible to implement in 2.0. 

However, if you just want to clean up the UI, then the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayManager.html DisplayManager] has a [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayManager.html#closeAllDisplayWindows(boolean) closeAllDisplayWindows] method.

=== createAcquisition ===

You can request your own new [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastores] (the rough equivalent of 1.4 acquisition objects) via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/DataManager.html DataManager's] various "createDatastore" methods (e.g. [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/DataManager.html#createRAMDatastore() createRAMDatastore], [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/DataManager.html#createMultipageTIFFDatastore(java.lang.String,%20boolean,%20boolean) createMultipageTIFFDatastore], and [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/DataManager.html#createSinglePlaneTIFFSeriesDatastore(java.lang.String) createSinglePlaneTIFFSeriesDatastore]). 

=== displayImage ===

This has been replaced by [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayWindow.html DisplayManager's] [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayManager.html#show(org.micromanager.data.Image) show] method. Note that this method creates a new [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastore] to store the image in. The old behavior of showing images in the Snap/Live Window is no longer possible.

=== enableLiveMode ===

This has been replaced by [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/SnapLiveManager.html SnapLiveManager's] [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/SnapLiveManager.html#setLiveMode(boolean) setLiveMode] method. You should also be aware of the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/SnapLiveManager.html#setSuspended(boolean) setSuspended] method if you need to briefly stop live mode, only to resume it later.

=== getAcqDlg === 

This method was deprecated in 1.4, and has been removed in 2.0. 

=== getAcquisition ===

This method was deprecated in 1.4 and has been removed in 2.0.

=== getAcquisitionPath ===

As discussed in the notes on <code>acquisitionExists</code>, above, Micro-Manager no longer maintains records on any acquisition objects; you are responsible for maintaining your own references to the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastore] that your data is in.

You can access the save path for a Datastore via its [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html#getSavePath() getSavePath] method.

=== getAcquisitionImageBitDepth ===

As discussed in the notes on <code>acquisitionExists</code>, above, Micro-Manager no longer maintains records on any acquisition objects; you are responsible for maintaining your own references to the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastore] that your data is in.

Image bit depth is now a property of the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Image.html Image] objects in the Datastore, and is theoretically not required to be the same for all Images in that Datastore (though in practice we do not expect varying bit depths to work right now). You can get the bit depth for an Image by asking for its [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Metadata.html Metadata] (via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Image.html#getMetadata() getMetadata] method) and then calling the Metadata's [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Metadata.html#getBitDepth() getBitDepth] method. 

If you need to get a single image out of a Datastore, you can call its [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html#getAnyImage() getAnyImage] method. 

=== getAcquisitionImageByteDepth ===

As discussed in the notes on <code>acquisitionExists</code>, above, Micro-Manager no longer maintains records on any acquisition objects; you are responsible for maintaining your own references to the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastore] that your data is in.

Image byte depth is now a property of the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Image.html Image] objects in the Datastore, and is theoretically not required to be the same for all Images in that Datastore (though in practice we do not expect varying byte depths to work right now). You can get the byte depth for a single image by calling its [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Image.html#getBytesPerPixel() getBytesPerPixel] method. 

If you need to get a single image out of a Datastore, you can call its [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html#getAnyImage() getAnyImage] method.

=== getAcquisitionImageCache ===

As discussed in the notes on <code>acquisitionExists</code>, above, Micro-Manager no longer maintains records on any acquisition objects; you are responsible for maintaining your own references to the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastore] that your data is in.

The Datastore functions as the equivalent of 1.4's image cache. You can ask it for images using its [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html#getImage(org.micromanager.data.Coords) getImage] method.

=== getAcquisitionImageHeight ===

As discussed in the notes on <code>acquisitionExists</code>, above, Micro-Manager no longer maintains records on any acquisition objects; you are responsible for maintaining your own references to the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastore] that your data is in.

Image height is now a property of the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Image.html Image] objects in the Datastore, and is theoretically not required to be the same for all Images in that Datastore (though in practice we do not expect varying image heights to work right now). You can get the height for a single image by calling its [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Image.html#getHeight() getHeight] method.

If you need to get a single image out of a Datastore, you can call its [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html#getAnyImage() getAnyImage] method.

=== getAcquisitionImageWidth ===

As discussed in the notes on <code>acquisitionExists</code>, above, Micro-Manager no longer maintains records on any acquisition objects; you are responsible for maintaining your own references to the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastore] that your data is in.

Image width is now a property of the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Image.html Image] objects in the Datastore, and is theoretically not required to be the same for all Images in that Datastore (though in practice we do not expect varying image widths to work right now). You can get the width for a single image by calling its [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Image.html#getWidth() getWidth] method.

If you need to get a single image out of a Datastore, you can call its [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html#getAnyImage() getAnyImage] method.

=== getAcquisitionMultiCamNumChannels ===

As discussed in the notes on <code>acquisitionExists</code>, above, Micro-Manager no longer maintains records on any acquisition objects; you are responsible for maintaining your own references to the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastore] that your data is in.

In 2.0 this method is not available. You may try to replicate it by comparing the number of channels in the Datastore (via its [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html#getAxisLength(java.lang.String) getAxisLength] method) to the number of unique cameras declared by the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Metadata.html Metadata]s of the various images (see [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Metadata.html#getCamera() Metadata.getCamera]). You can iterate over all images in the Datastore via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html#getUnorderedImageCoords() getUnorderedImageCoords] method combined with the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html#getImage(org.micromanager.data.Coords) getImage] method.

=== getAcquisitionPath ===

As discussed in the notes on <code>acquisitionExists</code>, above, Micro-Manager no longer maintains records on any acquisition objects; you are responsible for maintaining your own references to the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastore] that your data is in. 

The path of a Datastore's saved location on disk is accessible via its [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html#getSavePath() getSavePath] method.

=== getBackgroundColor ===

As discussed in the notes for <code>addMMBackgroundListener</code>, background color selection is now handled automatically. Thus this method is no longer needed.

=== getCacheForWindow ===

This has been replaced by the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayWindow.html DisplayWindow]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayWindow.html#getDatastore() getDatastore] method.

=== getCurrentAlbum ===

The Album Datastore can be accessed via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html Studio]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html#album() album] method.

=== getMMCore ===

The Micro-Manager Core object can be accessed via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html Studio]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html#core() core] method.

=== getSnapLiveWin ===

This has been replaced by the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/SnapLiveManager.html SnapLiveManager]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/SnapLiveManager.html#getDisplay() getDisplay] method. You can access the SnapLiveManager via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html Studio]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html#live() live] method.

Please note that the snap/live display is prone to being destroyed and recreated. It is not recommended that you keep references to the snap/live window in memory; request it anew each time you need it.

=== getUniqueAcquisitionName ===

As discussed in the notes on <code>acquisitionExists</code>, above, Micro-Manager no longer maintains records on any acquisition objects; you are responsible for maintaining your own references to the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastore] that your data is in.

Consequently, there is no need to generate unique acquisition names.

=== getXYPosListDlg ===

This method was deprecated in 1.4 and has been removed in 2.0

=== getXYStageName ===

This information can be accessed via the [https://valelab.ucsf.edu/~MM/doc/mmcorej/mmcorej/CMMCore.html Core]'s [https://valelab.ucsf.edu/~MM/doc/mmcorej/mmcorej/CMMCore.html#getXYStageDevice() getXYStageDevice] method. The Core in turn can be accessed via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html Studio]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html#core() core] method.

=== initializeAcquisition ===

The metadata set by this method is now handled automatically when images are saved; consequently, it is no longer needed.

=== isLiveModeOn ===

This method has been replaced by the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/SnapLiveManager.html SnapLiveManager]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/SnapLiveManager.html#getIsLiveModeOn() getIsLiveModeOn] method. The SnapLiveManager in turn can be accessed via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html Studio]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html#live() live] method.

Note that if you just want to temporarily suspend live mode, to resume it later, then you can make use of the SnapLiveManager's [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/SnapLiveManager.html#setSuspended(boolean) setSuspended] method.

=== logError ===

Replaced by the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/LogManager.html LogManager]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/LogManager.html#logError(java.lang.Exception) logError] method (and similarly for the variants on this method). The LogManager can be accessed via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html Studio]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html#logs() logs] method.

=== logMessage ===

As with <code>logError</code>, replaced by the LogManager's [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/LogManager.html#logMessage(java.lang.String) logMessage] method.

=== message ===

Replaced by the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/ScriptController.html ScriptController]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/ScriptController.html#message(java.lang.String) message] method. The ScriptController in turn can be accessed via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html Studio]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html#scripter() scripter] method.

=== openAcquisition ===

As discussed in the notes on <code>acquisitionExists</code>, above, Micro-Manager no longer maintains records on any acquisition objects; you are responsible for maintaining your own references to the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastore] that your data is in.

You can request new Datastores via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/DataManager.html DataManager]'s various "createDatastore" methods (e.g. [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/DataManager.html#createRAMDatastore() createRAMDatastore], [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/DataManager.html#createMultipageTIFFDatastore(java.lang.String,%20boolean,%20boolean) createMultipageTIFFDatastore], and [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/DataManager.html#createSinglePlaneTIFFSeriesDatastore(java.lang.String) createSinglePlaneTIFFSeriesDatastore]). If you use a file-backed Datastore, then images will automatically be saved to disk as you add them to the Datastore, though you should make certain to call the Datastore's [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html#freeze() freeze] method when you are done to ensure that saving completes successfully.

If you wish to view the images in the Datastore, use the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayManager.html DisplayManager]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayManager.html#createDisplay(org.micromanager.data.Datastore) createDisplay] method. The DisplayManager in turn can be accessed via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html Studio]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html#displays() displays] method.

In any case, there is no need to specify the dimensionality of the dataset ahead of time as was the case with <code>openAcquisition</code>

=== openAcquisitionData ===

Replaced by [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/DataManager.html DataManager]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/DataManager.html#loadData(java.lang.String,%20boolean) loadData] method. The DataManager in turn can be accessed via the http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html Studio]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html#data() data] method.

=== promptToSaveAcquisition ===

As discussed in the notes on <code>acquisitionExists</code>, above, Micro-Manager no longer maintains records on any acquisition objects; you are responsible for maintaining your own references to the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastore] that your data is in.

Replaced by the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastore]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html#save(org.micromanager.data.Datastore.SaveMode,%20java.awt.Window) save] method.

=== registerForEvents ===

Moved to the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/events/EventManager.html EventManager], which can be accessed via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html Studio]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html#events() events] method.

=== removeMMBackgroundListener ===

As discussed in <code>addMMBackgroundListener</code> above, day/night changes now happen automatically, so this method is obsolete.

=== setAcquisitionAddImageAsynchronous ===

As discussed in the notes on <code>acquisitionExists</code>, above, Micro-Manager no longer maintains records on any acquisition objects; you are responsible for maintaining your own references to the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastore] that your data is in.

As you now have complete control over adding images to your Datastores, it is up to you to implement asynchronous image-adding if you need it.

=== setAcquisitionProperty ===

As discussed in the notes on <code>acquisitionExists</code>, above, Micro-Manager no longer maintains records on any acquisition objects; you are responsible for maintaining your own references to the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastore] that your data is in.

Arbitrary metadata storage is available for both [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/SummaryMetadata.html SummaryMetadata] and individual image [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Metadata.html Metadata] via their respective <code>userData</code> fields.

=== setChannelColor ===

As discussed in the notes on <code>acquisitionExists</code>, above, Micro-Manager no longer maintains records on any acquisition objects; you are responsible for maintaining your own references to the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastore] that your data is in. Likewise, you are responsible for keeping track of any associated [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayWindow.html DisplayWindow]s open for a given Datastore. However, for managed Datastores, you can request all open DisplayWindows via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayManager.html DisplayManager]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayManager.html#getDisplays(org.micromanager.data.Datastore) getDisplays] method.

Channel color is a property of the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplaySettings.html DisplaySettings] for a given DisplayWindow. You can create a new DisplaySettings with adjusted channel colors (e.g. by using the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplaySettings.html#copy() copy] method), and then cause a DisplayWindow to use the new channel color via its [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayWindow.html#setDisplaySettings(org.micromanager.display.DisplaySettings) setDisplaySettings] method.

The above logic relies on you understanding the use of Builder patterns. See [[Using_Builders]] for more information.

=== setChannelContrast ===

As discussed in the notes on <code>acquisitionExists</code>, above, Micro-Manager no longer maintains records on any acquisition objects; you are responsible for maintaining your own references to the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastore] that your data is in. Likewise, you are responsible for keeping track of any associated [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayWindow.html DisplayWindow]s open for a given Datastore. However, for managed Datastores, you can request all open DisplayWindows via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayManager.html DisplayManager]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayManager.html#getDisplays(org.micromanager.data.Datastore) getDisplays] method.

Channel contrast settings are properties of the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplaySettings.html DisplaySettings] for a given DisplayWindow. You can create a new DisplaySettings with adjusted contrast (e.g. by using the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplaySettings.html#copy() copy] method), and then cause a DisplayWindow to use the new channel color via its [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayWindow.html#setDisplaySettings(org.micromanager.display.DisplaySettings) setDisplaySettings] method.

The above logic relies on you understanding the use of Builder patterns. See [[Using_Builders]] for more information.

=== setChannelName ===

As discussed in the notes on <code>acquisitionExists</code>, above, Micro-Manager no longer maintains records on any acquisition objects; you are responsible for maintaining your own references to the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastore] that your data is in.

Channel names are a property of the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/SummaryMetadata.html SummaryMetadata] associated with a given Datastore. You can access the SummaryMetadata using the Datastore's [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html#getSummaryMetadata() getSummaryMetadata] method, make a copy with the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/SummaryMetadata.html#copy() copy] method, adjust the channel names to suit, and then cause the Datastore to use the new summary metadata using the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html#setSummaryMetadata(org.micromanager.data.SummaryMetadata) setSummaryMetadata] method.

The above logic relies on you understanding the use of Builder patterns. See [[Using_Builders]] for more information.

=== setContrastBasedOnFrame ===

As discussed in the notes on <code>acquisitionExists</code>, above, Micro-Manager no longer maintains records on any acquisition objects; you are responsible for maintaining your own references to the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastore] that your data is in. Likewise, you are responsible for keeping track of any associated [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayWindow.html DisplayWindow]s open for a given Datastore. However, for managed Datastores, you can request all open DisplayWindows via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayManager.html DisplayManager]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayManager.html#getDisplays(org.micromanager.data.Datastore) getDisplays] method.

This method is not available in 2.0. However, you can replicate its functionality for a given DisplayWindow by combining the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplayWindow.html#setDisplayedImageTo(org.micromanager.data.Coords) SetDisplayedImageTo] method of DisplayWindow and the <code>shouldAutostretch</code> field of the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/display/DisplaySettings.html DisplaySettings].

=== setImageProperty ===

As discussed in the notes on <code>acquisitionExists</code>, above, Micro-Manager no longer maintains records on any acquisition objects; you are responsible for maintaining your own references to the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastore] that your data is in.

Arbitrary metadata storage is available for both [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/SummaryMetadata.html SummaryMetadata] and individual image [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Metadata.html Metadata] via their respective <code>userData</code> fields.

=== setRelativeStagePosition ===

This functionality be accessed via the [https://valelab.ucsf.edu/~MM/doc/mmcorej/mmcorej/CMMCore.html Core]'s [https://valelab.ucsf.edu/~MM/doc/mmcorej/mmcorej/CMMCore.html#setRelativePosition() setRelativePosition] method. The Core in turn can be accessed via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html Studio]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html#core() core] method.

=== setRelativeXYStagePosition ===

This functionality can be accessed via the [https://valelab.ucsf.edu/~MM/doc/mmcorej/mmcorej/CMMCore.html Core]'s [https://valelab.ucsf.edu/~MM/doc/mmcorej/mmcorej/CMMCore.html#setRelativeXYPosition() setRelativeXYPosition] method. The Core in turn can be accessed via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html Studio]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html#core() core] method.

=== setStagePosition ===

This functionality can be accessed via the [https://valelab.ucsf.edu/~MM/doc/mmcorej/mmcorej/CMMCore.html Core]'s [https://valelab.ucsf.edu/~MM/doc/mmcorej/mmcorej/CMMCore.html#setPosition() setPosition] method. The Core in turn can be accessed via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html Studio]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html#core() core] method.

=== setXYOrigin ===

This functionality can be accessed via the [https://valelab.ucsf.edu/~MM/doc/mmcorej/mmcorej/CMMCore.html Core]'s [https://valelab.ucsf.edu/~MM/doc/mmcorej/mmcorej/CMMCore.html#setOriginXY() setOriginXY] method. The Core in turn can be accessed via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html Studio]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html#core() core] method.

=== setXYStagePosition ===

This functionality can be accessed via the [https://valelab.ucsf.edu/~MM/doc/mmcorej/mmcorej/CMMCore.html Core]'s [https://valelab.ucsf.edu/~MM/doc/mmcorej/mmcorej/CMMCore.html#setXYPosition() setXYPosition] method. The Core in turn can be accessed via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html Studio]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html#core() core] method.

=== showError ===

Moved to the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/LogManager.html LogManager] object, which can be accessed via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html Studio]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html logs] method.

=== showMessage ===

Moved to the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/LogManager.html LogManager] object, which can be accessed via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html Studio]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html logs] method.

=== sleep ===

This method has been removed. Use [http://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html#sleep%28long%29 Thread.sleep] instead.

=== snapAndAddImage ===

As discussed in the notes on <code>acquisitionExists</code>, above, Micro-Manager no longer maintains records on any acquisition objects; you are responsible for maintaining your own references to the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html Datastore] that your data is in.

You can replicate the functionality of this method through a combination of the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/SnapLiveManager.html SnapLiveManager]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/SnapLiveManager.html#snap(boolean) snap] method and the Datastore's [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/data/Datastore.html#putImage(org.micromanager.data.Image) putImage] method. The SnapLiveManager can be accessed from the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html Studio]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html#live() live] method.

=== snapSingleImage ===

Replaced by the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/SnapLiveManager.html SnapLiveManager]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/SnapLiveManager.html#snap(boolean) snap] method.

=== unregisterForEvents ===

Moved to the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/events/EventManager.html EventManager] object, which can be accessed via the [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html Studio]'s [http://valelab.ucsf.edu/~MM/doc-2.0.0-alpha/mmstudio/org/micromanager/Studio.html#events() events] method.


{{2.0_Sidebar}}
