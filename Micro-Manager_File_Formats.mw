Micro-Manager can save files in two formats, which referred to as "separate image files" and "Image file stack".

<h1>Separate image files</h1>

Acquired images are saved to disk as separate TIFF files, each containing a single grayscale image. The file naming convention is "img" prefix followed by frame number, channel name and slice number (img_00000000t_channel_00z.tif). In addition, the folder will contain a file named "metadata.txt" that contains the metadata in JSON format. 

<h1>Image file stack (in brief)</h1>

A TIFF file or group of TIFF files that contain multiple acquired images per a single file. These files conform to the [http://www.openmicroscopy.org/site/support/file-formats/ome-tiff OME-TIFF] specification, allowing them to be easily imported into a variety of analysis applications including anything that utilizes the [http://loci.wisc.edu/software/bio-formats Bio-Formats library].

Image File Stacks are designed to be easily imported into ImageJ without the need for a special reader plugin. A stack file can be dragged onto the ImageJ toolbar and will automatically open as a hyperstack with the same contrast settings used in Micro-Manager. Any acquisition comments typed into the Multi-Dimensional Acquisition window or the comments tab of the main Micro-Manager GUI can be viewed by pressing "i" with one of these files open in ImageJ.

By default, one file is created for each XY stage position (up to a maximum of 4 GB per file). In the tools-options menu, this can be changed to save all XY positions in a single file. This is especially useful for acquisitions using a large number XY positions. Since OME-TIFFs require that an identical String of XML metadata be embedded in each file in an acquisition, acquisitions that have a large number of XY positions with a small amount of data at each one waste space on disk and time by writing the same String of metadata in each file at the acquisition’s conclusion.

Writing to these files results in faster performance than writing to '''Seperate Image Files''', in part because it minizes the number of system calls to create new files. This can be advantageous in situations where disk write speed is a limiting factor (i.e. writing to a server or collecting data at a high rate).

<h1> Programming using these file formats </h1>

<h2> Reading Images </h2>

Existing Micro-Manager libraries can be used to easily read these files. in order to do so a java project must use '''MMCoreJ.jar''' and '''MMJ_.jar''' as libraries. These JARs can be found in the Micro-Manager-1.4/plugins/Micro-Manager/ directory. Both file formats sit behind a common interface for reading and writing, [https://valelab.ucsf.edu/trac/micromanager/browser/mmstudio/src/org/micromanager/api/TaggedImageStorage.java org/micromanager/api/TaggedImage.java]. Image file stacks are implement by [https://valelab.ucsf.edu/trac/micromanager/browser/mmstudio/src/org/micromanager/acquisition/TaggedImageStorageMultipageTiff.java org/micromanager/acquisition/TaggedImageStorageMultipageTiff.java]. To create an instance of this class, capable of reading an existing Image file stack data set which is stored at "C:\Data\Acquisition1", use:

<span class="source"> TaggedImageStorageMultipageTiff stackReader = new TaggedImageStorageMultipageTiff("C:\Data\Acquisition1", false, null, false, false);</span><br />

Important methods for utilizing this class are:

<span class="source"> 
public TaggedImage getImage(int channelIndex, int sliceIndex, int frameIndex, int positionIndex) <br /> public JSONObject getSummaryMetadata() <br /> public Set<String> imageKeys() <br /> public void close() </span><br /><br />

'''imageKeys()''' returns a [http://docs.oracle.com/javase/6/docs/api/java/util/Set.html java.util.Set<String>] containing the image labels for each image present in the data set. An image label is simply the image's channel, slice, frame, and position indices separated by underscores. For example, the label for the image of channel 1, slice 2, frame 3, position 4 would be "1_2_3_4".

'''close()''' should be called to release the connection the files when they are no longer needed. 

A '''TaggedImage''' simply consists of two public fields. TaggedImage.tags is a reference to the image metadata, stored in a [http://www.json.org/ JSONObject]. TaggedImage.pix is a pointer to the image pixels, stored in a '''byte[]''', '''short[]''', or '''int[]''' depending on the image type. 


<h2> Writing Images </h2>

Writing images into the Image File Stack format uses the same class as reading one of these datasets, but requires a different parameters be passed to the constructor. When writing an Image File Stack, you will need to pass a [http://www.json.org/ JSONObject] containing a minimal amount of summary metadata to the constructor. Code for creating this summary metadata with the minimal amount of tags needed for saving is listed below:

<span class="source"> 
pixelType = mmc.getPixelType();
summary = new org.json.JSONObject();
summary.put("SlicesFirst",true);
summary.put("TimeFirst",true);
summary.put("Slices", 1);
summary.put("Positions", 1);
summary.put("Channels",1);
summary.put("Frames",IMAGES_TO_SAVE);
summary.put("Positions",1);
summary.put("PixelType", pixelType);
summary.put("Width",mmc.getImageWidth());
summary.put("Height",mmc.getImageHeight());
summary.put("Prefix",filename);
summary.put("ChColors", new org.json.JSONArray("[1]"));
summary.put("ChNames", new org.json.JSONArray("[h]"));
summary.put("ChMins", new org.json.JSONArray("[0]"));
summary.put("ChMaxes", new org.json.JSONArray("[1]"));
</span><br />





<h1> Image file stack specification </h1>

Micro-Manager Image file stacks conform to both the [http://partners.adobe.com/public/developer/en/tiff/TIFF6.pdf TIFF Specification] and [http://www.openmicroscopy.org/site/support/file-formats/ome-tiff OME TIFF Specification], contain data allowing them to be easily imported into ImageJ, store acquisition comments and display settings, and store an index map of the byte offsets of images within a file to allow for optimal reading performance.

<h2> Header </h2>

'''Bytes 0-7''': Standard TIFF Header

'''8-11''': Index map offset header (54773648)

'''12-15''': Index map offset

'''16-19''': Display settings offset header (483765892)

'''20-23''': Display settings offset

'''24-27''': Comments offset header (99384722)

'''28-31''': Comments offset

'''32-35''': Summary metadata header (2355492)

'''36-39''': Summary metadata length

'''40-start of first IFD''': 1 byte for each character of summary metadata



<h2> Image File Directories</h2>

Each IFD will contain the same set of TIFF tags, except for the first one in each file, which contains two ImageJ metadata tags, and two copies of the '''ImageDescription''' tag. One of these contains a string needed by ImageJ to recognize these files, and the other contains OME metadata. Although these tags appear in the first IFD, their values will not be written until the end of the file, when it is closed. The tags are written in the following order (non-standard TIFF tags have the values listed after them):


'''ImageWidth'''
	
'''ImageHeight'''

'''BitsPerSample'''

'''Compression'''

'''PhotometricInterpretation'''

'''ImageDescription''' (first IFD only)--contains OME XML metadata

a 2nd '''ImageDescription''' (first IFD only)-–contains ImageJ file opening information

'''StripOffsets'''

'''SamplesPerPixel'''

'''RowsPerStrip'''

'''StripByteCounts'''

'''XResolution'''

'''YResolution'''

'''ResolutionUnit'''

'''IJMetadataByteCounts''' (first IFD only) (50838)

'''IJMetadata''' (first IFD only) (50839)

'''MicroManagerMetadata''' (51123)


Immediately after these tags are written:

-4 bytes containg the offset of the next IFD (per the TIFF specification)

-In RGB files only, 6 bytes containing the values of the '''BitsPerSample''' tag
Pixel values

-16 bytes containing the values of the '''XResolution''' and '''YResolution''' tags

-The value of the '''MicroManagerMetadata''' tag: 1 byte for each character of image metadata converted to a String


<h2>End of file</h2>

After the last IFD, the following constructs are written:

<h3>Index map</h3>

A listing of all the images contained in the file and their byte offsets. This allows a specific image to be quickly accessed without having to parse the entire file and read in image metadata. It consists of the following:

-A 4 byte header (3453623)

-4 bytes containing the number of entries in the index map

-20 bytes for each entry, with 4 bytes each allocated to the image’s channel index, slice index, frame index, position index, and byte offset of the image’s IFD within the file


<h3>ImageJ Metadata</h3>

A subset of the metadata used by the ImageJ TIFF writer [http://imagej.nih.gov/ij/source/ij/io/TextEncoder.java (ij.io.TiffEncoder.java)], which allows contrast settings and acquisition comments to propagate into ImageJ. The position and size of this metadata is specified by the '''IJMetadataCounts''' and '''IJMetadata''' tags in the first IFD.


<h3>OME XML Metadata</h3>

A string containing the OME XML metadata for this data set. This String is referenced by the first of the two '''ImageDescription''' tags in the first IFD of the file, in accordance with the [http://www.openmicroscopy.org/site/support/file-formats/ome-tiff/ome-tiff-specification OME-TIFF specification]. Since this String must be identical for all files in a data set, it is not written for any file until the entire data set is closed at the conclusion of an acquisition. 


<h3>ImageJ Image Description String</h3>

The ImageJ image description String that allows these files to opened correctly as hyperstacks in ImageJ. This String is referenced by the second of the two '''ImageDescription''' tags in the first IFD of the file.


<h3>Image display settings</h3>

Image display settings (channel contrast and colors), which are automatically rewritten whenever these are changed in an open data set. The first 4 bytes of this block contain the '''Display Settings Header''' (347834724), and the next 4 contain the number of subsequent bytes reserved for display settings. A String containing display settings (which are normally stored in a [http://www.json.org/javadoc/org/json/JSONObject.html JSONObject]) is written one byte per character.

<h3>Acquisition and Image comments</h3>

A String containing acquisition and Image comments. The first 4 bytes of this block contain the '''Comments Header''' (84720485), and the next 4 contain the length of String version of the [http://www.json.org/javadoc/org/json/JSONObject.html JSONObject] used to store acquisition comments. This String is rewritten whenever acquisition or image comments are changed.



--[[User:Henry Pinkard|Henry Pinkard]] 7:35, 20th March 2013 (PDT)
