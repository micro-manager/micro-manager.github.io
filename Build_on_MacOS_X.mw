== Getting the required tools ==

It is recommended that you use OS X 10.7 or later to build Micro-Manager, although earlier versions may work without too much trouble.

Get Xcode from Apple's App Store. Although we will only be using the command-line compilers and tools, make sure to start Xcode once and allow it to install the Command Line Tools.

A number of command-line tools are required to build Micro-Manager. The easiest way to obtain them is to use [http://brew.sh/ Homebrew]:

  brew install autoconf automake libtool pkg-config swig subversion

== Getting dependencies ==

Boost C++ Libraries are required to build Micro-Manager. It is easiest to install it using Homebrew:

  brew install boost

To build the Micro-Manager application, you also need the Java Development Kit. [http://www.oracle.com/technetwork/java/javase/downloads/ JDK 7] from Oracle is recommended. (Micro-Manager Java source code is written in Java 6. You can also use Apple JDK 6, but you will need to have an Apple developer account to download the tools needed for development.) You will also need a copy of [http://imagej.nih.gov/ij/download.html ImageJ] 1.48. Extract this to any desired location.

If you want to build the Python wrapper (MMCorePy), you will need Python 2.7 or 3.x and NumPy. These can be installed from binary distributions or using Homebrew (Python 2 is also preinstalled in OS X).

== Getting Micro-Manager source code ==

Check out [[Micro-Manager Source Code]] using Subversion. Place the main source tree (from micromanager2) and the 3rdpartypublic directory in the same parent directory.

== Configuring and building ==

See <code>doc/how-to-build.md</code> for generic build instructions.

The most common way to build and install Micro-Manager is to run the following, in the root of the micromanager source tree:

  ./autogen.sh
  ./configure --enable-imagej-plugin=/path/to/ImageJ
  make
  make install-ijplugin

The last step will print instructions for how to run the installed Micro-Manager.

To get help with <code>./configure</code> options, type

  ./configure --help

== Device adapter dependencies ==

Some device adapters require extra dependencies. Most of these can be installed using Homebrew.

  # To build USBManager
  brew install libusb-compat

  # To build HIDManager
  brew install hidapi

  # To build dc1394 and IIDC
  brew install libdc1394

  # To build GPhoto2
  brew install libgphoto2 freeimage

  # To build OpenCVgrabber
  brew install opencv

See also: output of

  ./DeviceAdapters/configure --help

or

  ./configure --help=recursive

Any vendor frameworks (mostly camera SDKs) will be automatically detected if installed in the default location.
